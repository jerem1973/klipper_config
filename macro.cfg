#####################################################################
#   G28
#####################################################################
# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        M117 HOMING
        status_homing
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            CG28 ; home if not already homed
        {% endif %}
        M117 QGL
        status_leveling
        QUAD_GANTRY_LEVEL
        G28 Z
        status_ready
    {% endif %}
#####################################################################
#   G32
#####################################################################  
[gcode_macro G32]
gcode:
    M117 HOMING & LEVELING
    BED_MESH_CLEAR
    CG28                      ; Home if not homed to get everything turned on
    status_leveling
    QUAD_GANTRY_LEVEL         ; Level
    G28 Z                     ; Home the Z now that nozzle is clean
    G0 X175 Y175 Z20 F6000    ; Return to center of bed
    status_ready
#####################################################################
#   PRINT START
#####################################################################
[gcode_macro PRINT_START]
gcode: 
    SAVE_GCODE_STATE NAME=start
    # Parameters
    {% set bedtemp = params.BED|default(110)|int %}
    {% set hotendtemp = params.HOTEND|default(250)|int %}
    {% set chambertemp = params.CHAMBER|default(20)|int %}
    {% if bedtemp == 110 %}
        BEACON_ABS
    {% else %}
        BEACON_PLA
    {% endif %}

    SET_PIN PIN=caselight VALUE=1.00
    CG28
    # <insert your routines here>
    status_heating
    M117 Starting warmup
    M117 Warmup
    G0 Z20
    G0 x175 y175    
    M106 s255
    SET_FAN_SPEED FAN=filter SPEED=1
    M190 S{bedtemp}  ; set & wait for bed temp
    BEEP I=1 DUR=100 FREQ=2000
    M109 S{hotendtemp}                                                           ; set & wait for hotend temp
    BEEP I=1 DUR=100 FREQ=2000
    TEMPERATURE_WAIT SENSOR="temperature_sensor enclosure_temp" MINIMUM={chambertemp}   ; wait for chamber temp
    BEEP I=1 DUR=100 FREQ=2000
    M106 S0
    G32
    M117 Meshing
    status_meshing
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default
    SET_FAN_SPEED FAN=filter SPEED=0
    status_printing
    M117 Printing
    RESTORE_GCODE_STATE NAME=start

#####################################################################
#   PRINT END
#####################################################################
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
# safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    SET_FAN_SPEED FAN=filter SPEED=1
    status_cooling
    M400                           ; wait for buffer to clear
    G92 E0
    G1 E-2 F3600
    G91
    G0 Z1 X20 Y20 F20000
    G28 X Y
    {% if unload|int == 1%}
    ERCF_EJECT
    {% endif %}
    TURN_OFF_HEATERS
    M107                           ; turn off fan 
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE="default"
    SET_SKEW CLEAR=1
    SET_GCODE_OFFSET Z=0.0
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=360
    M117 FINISH
    G90
    BEEP I=5 DUR=300 FREQ=3500
    SET_PIN PIN=caselight VALUE=0.00
    status_part_ready
    QUERY_AIR_FILTER
#####################################################################
#   G29
#####################################################################
[gcode_macro G29]
gcode:
  {% set t = params.T|default(0)|float %}

  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G29_state
    G90
    G1 Z10 F240
    {% if t > 30.0 %}
      M190 S{t}
    {% endif %}
    M117 MESHING
    STATUS_MESHING
    BED_MESH_CALIBRATE
    {% if 'S' in params %}
      M140 S{params.S}
    {% endif %}
    G90
    G1 Z30 F240
    G1 X175 Y175 F20000
    RESTORE_GCODE_STATE NAME=G29_state MOVE=0
  {% endif %}
#####################################################################
#   BEEP
#####################################################################
[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}
#####################################################################
#   TIMELAPSE
#####################################################################
[gcode_macro _bot_data]
variable_lapse_video_size: 0
variable_lapse_filename: 'None'
variable_lapse_path: 'None'
gcode:
    M118 Setting bot lapse variables

#####################################################################
#   TEST SPEED
#####################################################################
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
#####################################################################
#   BEACON
#####################################################################
                                 
[gcode_macro SAVE_NEW_Z]
gcode:
    Z_OFFSET_APPLY_PROBE

[gcode_macro TEST_PROBE]
gcode:
    PROBE_ACCURACY

[gcode_macro CALIB_Z]
gcode:
    BEACON_CALIBRATE    

#####################################################################
#   ERCF
#####################################################################
                                 
[gcode_macro ERCF_RST_STATS]
gcode:
    ERCF_RESET_STATS
